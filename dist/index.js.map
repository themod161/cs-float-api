{"version":3,"sources":["../src/index.ts","../src/CsFloatClient.ts","../src/types.ts","../src/rateLimit.ts","../src/BuyOrderExpressionBuilder.ts"],"sourcesContent":["export { CsFloatClient } from './CsFloatClient';\r\nexport type { CsFloatOptions } from './types';\r\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\r\nimport { CsFloatOptions, getTradesRequestOptions, HttpStatusMessages, IAutoBitsResponse, IBitItemResponse, IBuyOrder, IBuyOrderExpression, IBuyOrderMarketHashName, ICsFloatAccountStandingResponse, ICsFloatListingsResponse, ICsFloatMeResponse, IGetListingsParams, IInventoryItem, IItemHistoryEntry, IListingEntry, INotificationsResponse, IOfferHistory, IOffersResponse, ISaleItemParams, ISaleListingResponse, ISalesItemsResponse, ISimilarItemEntry, ITradeOffer, ITradeOfferResponse } from './types';\r\nimport { RateLimiter } from './rateLimit';\r\nimport { BuyOrderExpressionBuilder, IExpressionGroup } from './BuyOrderExpressionBuilder';\r\nimport qs from 'qs';\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport interface CsFloatClientEvents {\r\n    'api:UpdateMe': ICsFloatMeResponse;\r\n    'api:UpdateListings': IListingEntry[];\r\n    'api:UpdateInventory': IInventoryItem[];\r\n    'api:UpdateTradeOfferUrl': { trade_url: string; message: string };\r\n    'api:ReadNotification': { notificationId: string; message: string };\r\n    'api:UpdateNotifications': INotificationsResponse;\r\n    'api:UpdateOfferHistory': { offerId: string; history: IOfferHistory[] };\r\n    'api:UpdateOffersTimeline': IOffersResponse;\r\n    'api:UpdateStall': IListingEntry[];\r\n    'api:UpdateSaleItem': ISaleListingResponse;\r\n    'api:BuyItems': { message: string }[];\r\n    'api:CancelTrades': ITradeOffer[];\r\n    'api:AcceptTrades': ITradeOffer[];\r\n    'api:UpdateAutoBits': IAutoBitsResponse;\r\n    'api:UpdateMaxBargain': { maxBargain: number; message: string };\r\n    'api:UpdateBargainStatus': { status: boolean; message: string };\r\n    'api:UpdatePrivacyStall': { isPublic: boolean; message: string };\r\n    'api:UpdateAwayStall': { isAway: boolean; message: string };\r\n    'api:UpdateBuyOrders': IBuyOrder[];\r\n    'api:UpdateAccountStanding': ICsFloatAccountStandingResponse;\r\n    'api:UpdateTrades': ITradeOfferResponse;\r\n    'api:UpdateBuyOrderDetails': IBuyOrder;\r\n    'api:UpdateMeEvery': ICsFloatMeResponse;\r\n    'rateLimit:Update': (key: string, info: { limit: number; remaining: number; reset: number }) => void;\r\n    'error': Error;\r\n    'api:VerifySms': { message: string };\r\n    'api:UpdateListingBuyOrders': {\r\n        listingId: number;\r\n        buyOrders: IBuyOrder[];\r\n    }\r\n    'api:UpdateSalesItems': {\r\n        listingId: number;\r\n        salesItems: ISalesItemsResponse;\r\n    };\r\n    'api:UpdateSimilarItems': {\r\n        listingId: number;\r\n        similarItems: ISimilarItemEntry[];\r\n    };\r\n    'api:UpdateListing': IListingEntry;\r\n    'api:UpdateItemHistory': {\r\n        market_hash_name: number;\r\n        paint_index: number;\r\n        history: IItemHistoryEntry[];\r\n    };\r\n    'api:UpdateBitItem': IBitItemResponse;\r\n    'api:UpdateBitItemHistory': {\r\n        market_hash_name: string;\r\n        history: IItemHistoryEntry[];\r\n    };\r\n    'api:UpdateMobileStatus': {\r\n        status: boolean;\r\n        message: string;\r\n    };\r\n    'api:BitItem': IBitItemResponse;\r\n    'api:UpdateTradeOffer': ITradeOffer;\r\n    'api:NewTradeOffer': ITradeOffer;\r\n}\r\n\r\ntype EventArgs<K extends keyof CsFloatClientEvents> =\r\n    CsFloatClientEvents[K] extends (...args: infer A) => any ? A\r\n    : [CsFloatClientEvents[K]];\r\n\r\nexport class CsFloatClient extends EventEmitter {\r\n    private client: AxiosInstance;\r\n    private rateLimiter = new RateLimiter();\r\n    public user: ICsFloatMeResponse | null = null;\r\n    private updateInterval: NodeJS.Timeout | null = null;\r\n\r\n    private updateMeEvery: number | null = null;\r\n\r\n    private cache: {\r\n        me: ICsFloatMeResponse | null;\r\n        accountStanding: ICsFloatAccountStandingResponse | null;\r\n        buyOrders: IBuyOrder[] | null;\r\n        autoBits: IAutoBitsResponse | null;\r\n        trades: ITradeOfferResponse | null;\r\n        notifications: INotificationsResponse | null;\r\n        inventory: IInventoryItem[] | null;\r\n        listings: { [key: string]: IListingEntry } | null;\r\n        itemHistory: { [key: string]: IItemHistoryEntry[] } | null;\r\n    } = {\r\n            me: null,\r\n            accountStanding: null,\r\n            buyOrders: null,\r\n            autoBits: null,\r\n            trades: null,\r\n            notifications: null,\r\n            inventory: null,\r\n            listings: null,\r\n            itemHistory: null\r\n        };\r\n\r\n    constructor(private options: CsFloatOptions) {\r\n        super();\r\n        this.client = axios.create({\r\n            baseURL: options.baseUrl ?? 'https://csfloat.com',\r\n            headers: \"apiKey\" in options\r\n                ? { Authorization: `${options.apiKey}` }\r\n                : { Cookie: `session=${options.session}` }\r\n        });\r\n        this.updateMeEvery = options.updateUserEvery ?? null;\r\n    }\r\n    public override emit<K extends keyof CsFloatClientEvents>(\r\n        eventName: K,\r\n        ...args: EventArgs<K>\r\n    ): boolean {\r\n        return super.emit(eventName, ...args);\r\n    }\r\n    public override on<K extends keyof CsFloatClientEvents>(event: K, listener: (payload: CsFloatClientEvents[K]) => void): this {\r\n        if (event === 'api:UpdateMe' && this.listenerCount(event) === 0) {\r\n            if (!this.updateMeEvery) {\r\n                this.updateMeEvery = 60000;\r\n            }\r\n            this.startUpdateMeInterval();\r\n        }\r\n        if (event === 'rateLimit:Update') {\r\n            this.rateLimiter.on('update', (key, info) => {\r\n                this.emit('rateLimit:Update', key, info);\r\n            });\r\n        }\r\n\r\n        super.on(event, listener);\r\n\r\n        return this;\r\n    }\r\n\r\n    public override off(event: string, listener: (...args: any[]) => void): this {\r\n        super.off(event, listener);\r\n\r\n        if (event === 'api:UpdateMe' && this.listenerCount(event) === 0) {\r\n            this.stopUpdateMeInterval();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private startUpdateMeInterval() {\r\n        if (this.updateInterval) return;\r\n\r\n        const fetchMe = async () => {\r\n            const me = await this.getMe().catch((error) => {\r\n                this.emit('error', error);\r\n                return null;\r\n            });\r\n        };\r\n\r\n        fetchMe();\r\n\r\n        this.updateInterval = setInterval(() => {\r\n            fetchMe();\r\n        }, this.updateMeEvery || 60000);\r\n    }\r\n\r\n    private stopUpdateMeInterval() {\r\n        if (this.updateInterval) {\r\n            clearInterval(this.updateInterval);\r\n            this.updateInterval = null;\r\n        }\r\n    }\r\n    async get<T = any>(\r\n        path: string,\r\n        params?: Record<string, any> & { refererUrl?: string } & { key?: string }\r\n    ): Promise<T> {\r\n        try {\r\n            const { refererUrl, key, ...query } = params || {};\r\n            const headers: Record<string, string> = {};\r\n\r\n            if (refererUrl) {\r\n                headers.referer = refererUrl;\r\n            }\r\n\r\n            const response = await this.client.get<T>(path, {\r\n                params: query,\r\n                headers,\r\n                paramsSerializer: {\r\n                    serialize: (params: any) => {\r\n                        // Преобразуем state: ['failed', 'queued'] → state=failed,queued\r\n                        const modified = { ...params };\r\n\r\n                        if (Array.isArray(modified.state)) {\r\n                            modified.state = modified.state.join(',');\r\n                        }\r\n\r\n                        return qs.stringify(modified, { encode: true });\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.rateLimiter.update(response.headers, key || 'main');\r\n            return response.data;\r\n        } catch (error: any) {\r\n\r\n            if (axios.isAxiosError(error) && error.response) {\r\n                throw error.response.data || new Error(`Request failed with status ${error.response.status}: ${error.response.statusText}`);\r\n            } else {\r\n                // Handle other errors\r\n                throw error instanceof Error ? error : new Error('An unknown error occurred');\r\n            }\r\n        }\r\n    }\r\n    async post<T = any>(\r\n        path: string,\r\n        data?: any,\r\n        options: AxiosRequestConfig & { key: string } = { key: 'main' }\r\n    ): Promise<T> {\r\n        try {\r\n            const response = await this.client.post<T>(path, data, options);\r\n            this.rateLimiter.update(response.headers, options.key);\r\n            return response.data;\r\n        } catch (error: any) {\r\n            if (axios.isAxiosError(error) && error.response) {\r\n                throw error.response.data || { code: error.response.status, message: HttpStatusMessages[error.response.status] } || new Error(`Request failed with status ${error.response.status}: ${error.response.statusText}`);\r\n            } else {\r\n                // Handle other errors\r\n                throw error instanceof Error ? error : new Error('An unknown error occurred');\r\n            }\r\n        }\r\n    }\r\n    async put<T = any>(\r\n        path: string,\r\n        data?: any,\r\n        options: AxiosRequestConfig & { key: string } = { key: 'main' }\r\n    ): Promise<T> {\r\n        try {\r\n            const response = await this.client.put<T>(path, data, options);\r\n            this.rateLimiter.update(response.headers, options.key);\r\n            return response.data;\r\n        } catch (error: any) {\r\n            if (axios.isAxiosError(error) && error.response) {\r\n                throw error.response.data || { code: error.response.status, message: HttpStatusMessages[error.response.status] } || new Error(`Request failed with status ${error.response.status}: ${error.response.statusText}`);\r\n            } else {\r\n                throw error instanceof Error ? error : new Error('An unknown error occurred');\r\n            }\r\n        }\r\n    }\r\n    async patch<T = any>(\r\n        path: string,\r\n        data?: any,\r\n        options: AxiosRequestConfig & { key: string } = { key: 'main' }\r\n    ): Promise<T> {\r\n        try {\r\n            const response = await this.client.patch<T>(path, data, options);\r\n            this.rateLimiter.update(response.headers, options.key);\r\n            return response.data;\r\n        } catch (error: any) {\r\n            if (axios.isAxiosError(error) && error.response) {\r\n                throw error.response.data || { code: error.response.status, message: HttpStatusMessages[error.response.status] } || new Error(`Request failed with status ${error.response.status}: ${error.response.statusText}`);\r\n            } else {\r\n                throw error instanceof Error ? error : new Error('An unknown error occurred');\r\n            }\r\n        }\r\n    }\r\n    async delete<T = any>(path: string, options: AxiosRequestConfig & { key: string } = { key: 'main' }): Promise<T> {\r\n        try {\r\n            const response = await this.client.delete<T>(path, options);\r\n            this.rateLimiter.update(response.headers, options.key);\r\n            return response.data;\r\n        } catch (error: any) {\r\n            if (axios.isAxiosError(error) && error.response) {\r\n                throw error.response.data || { code: error.response.status, message: HttpStatusMessages[error.response.status] } || new Error(`Request failed with status ${error.response.status}: ${error.response.statusText}`);\r\n            } else {\r\n                throw error instanceof Error ? error : new Error('An unknown error occurred');\r\n            }\r\n        }\r\n    }\r\n    async getAccountStanding() {\r\n        const path = '/api/v1/account-standing';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<ICsFloatAccountStandingResponse>(path, {\r\n            key\r\n        });\r\n        this.cache.accountStanding = response;\r\n        this.emit('api:UpdateAccountStanding', response);\r\n\r\n        return response;\r\n    }\r\n    async getBuyOrders(page: number = 0, limit: number = 10, order: 'asc' | 'desc' = 'desc') {\r\n        const path = `/api/v1/me/buy-orders`;\r\n        const key = 'main';\r\n\r\n        if (page < 0 || limit < 1) {\r\n            console.warn('Page must be >= 0 and limit must be >= 1, defaulting to page 0 and limit 10');\r\n            page = 0;\r\n            limit = 10;\r\n        }\r\n        if (limit > 100) {\r\n            console.warn('Limit must be <= 100, defaulting to 10');\r\n            limit = 10;\r\n        }\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<{ count: number; orders: IBuyOrder[] }>(path, { refererUrl: 'https://csfloat.com/profile', page, limit, order, key });\r\n\r\n        this.cache.buyOrders = response.orders;\r\n        this.emit('api:UpdateBuyOrders', response.orders);\r\n\r\n        return response;\r\n    }\r\n\r\n    async updateBuyOrderDetails(buyOrder: IBuyOrder, options:\r\n        | { expression?: IExpressionGroup; max_price?: number; quantity?: number, market_hash_name?: string }\r\n        = {}) {\r\n\r\n        if (!buyOrder.id) {\r\n            throw new Error('Buy order ID is required');\r\n        }\r\n\r\n        const useMarketHash = options.market_hash_name\r\n            ?? (!options.expression && buyOrder.market_hash_name !== undefined)\r\n            ?? false;\r\n\r\n        const newBuyOrderData = {\r\n            expression: useMarketHash\r\n                ? undefined\r\n                : options.expression\r\n                ?? new BuyOrderExpressionBuilder(buyOrder.expression).buildExpression(),\r\n\r\n            market_hash_name: useMarketHash\r\n                ? options.market_hash_name ?? buyOrder.market_hash_name\r\n                : undefined,\r\n\r\n            max_price: options.max_price ?? buyOrder.price,\r\n            quantity: options.quantity ?? buyOrder.qty,\r\n        };\r\n        if (newBuyOrderData.max_price < 0) {\r\n            throw new Error('Max price must be a positive number');\r\n        }\r\n        if (newBuyOrderData.quantity < 0) {\r\n            throw new Error('Quantity must be a positive number');\r\n        }\r\n        if (!newBuyOrderData.expression && !newBuyOrderData.market_hash_name) {\r\n            throw new Error('Either expression or market_hash_name must be provided');\r\n        }\r\n        if (newBuyOrderData.expression && newBuyOrderData.market_hash_name) {\r\n            throw new Error('Cannot provide both expression and market_hash_name');\r\n        }\r\n        if (newBuyOrderData.expression && typeof newBuyOrderData.expression !== 'object') {\r\n            throw new Error('Expression must be an object');\r\n        }\r\n        if (!newBuyOrderData.market_hash_name) delete newBuyOrderData.market_hash_name;\r\n        if (!newBuyOrderData.expression) delete newBuyOrderData.expression;\r\n\r\n        const order = await this.deleteBuyOrder(buyOrder.id);\r\n        if (order.message !== 'successfully removed the order') {\r\n            throw new Error(`Failed to delete buy order: ${order.message}`);\r\n        }\r\n        this.cache.buyOrders = this.cache.buyOrders?.filter(o => o.id !== buyOrder.id) || [];\r\n\r\n        const response = await this.placeBuyOrder(newBuyOrderData as { expression: IExpressionGroup; max_price: number; quantity: number; } | { market_hash_name: string; max_price: number; quantity: number; });\r\n        if (!response || !('id' in response)) {\r\n            throw new Error('Failed to place new buy order');\r\n        }\r\n        this.cache.buyOrders = this.cache.buyOrders || [];\r\n        this.cache.buyOrders.push(response);\r\n        this.emit('api:UpdateBuyOrders', this.cache.buyOrders);\r\n        return response;\r\n    }\r\n    async deleteBuyOrder(orderId: string) {\r\n        const path = `/api/v1/buy-orders/${orderId}`;\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.delete<{ message: string }>(path, {\r\n            key\r\n        });\r\n        if (response.message !== 'successfully removed the order') {\r\n            throw new Error(`Failed to delete buy order: ${response.message}`);\r\n        }\r\n        this.cache.buyOrders = this.cache.buyOrders?.filter(o => o.id !== orderId) || [];\r\n        this.emit('api:UpdateBuyOrders', this.cache.buyOrders);\r\n\r\n        return response;\r\n    }\r\n    async getMe() {\r\n        const path = '/api/v1/me';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<ICsFloatMeResponse>(path, { refererUrl: 'https://csfloat.com/profile', key });\r\n\r\n        this.user = response;\r\n        this.cache.me = response;\r\n        this.emit('api:UpdateMe', response);\r\n        return response;\r\n    }\r\n    async placeBuyOrder(\r\n        options:\r\n            | { expression: IExpressionGroup; max_price: number; quantity: number }\r\n            | { market_hash_name: string; max_price: number; quantity: number }\r\n    ): Promise<IBuyOrderExpression | IBuyOrderMarketHashName> {\r\n        const path = `/api/v1/buy-orders`;\r\n        const key = 'buy_order';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const request: {\r\n            market_hash_name?: string;\r\n            expression?: IExpressionGroup;\r\n            max_price: number;\r\n            quantity: number;\r\n        } = {\r\n            max_price: options.max_price,\r\n            quantity: options.quantity,\r\n        };\r\n\r\n        if ('expression' in options) {\r\n            request.expression = options.expression;\r\n        } else {\r\n            request.market_hash_name = options.market_hash_name;\r\n        }\r\n\r\n        const response = await this.post<\r\n            'expression' extends keyof typeof request\r\n            ? IBuyOrderExpression\r\n            : IBuyOrderMarketHashName\r\n        >(path, request, {\r\n            key\r\n        });\r\n\r\n        this.cache.buyOrders = this.cache.buyOrders || [];\r\n        this.cache.buyOrders.push(response);\r\n        this.emit('api:UpdateBuyOrders', this.cache.buyOrders);\r\n        return response;\r\n    }\r\n\r\n    async getAutoBits() {\r\n        const path = '/api/v1/me/auto-bids';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<IAutoBitsResponse>(path, { refererUrl: 'https://csfloat.com/profile', key });\r\n\r\n        this.cache.autoBits = response;\r\n        this.emit('api:UpdateAutoBits', response);\r\n        return response;\r\n    }\r\n    /**\r\n        * Changes the maximum allowed bargain value.\r\n        * \r\n        * @param number - The new max bargain value (percent). Must be a positive number.\r\n        * @throws Will throw an error if the value is less than 0.\r\n    */\r\n    async changeMaxBargain(number: number) {\r\n        const path = '/api/v1/me';\r\n        const key = 'main';\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        if (number < 0) {\r\n            throw new Error('Max bargain must be a positive number');\r\n        }\r\n        if (number > 90) {\r\n            throw new Error('Max bargain cannot be more than 90 percent');\r\n        }\r\n        const response = await this.patch<{ message: string }>(path, { max_offer_discount: number * 100 }, { key });\r\n        this.emit('api:UpdateMaxBargain', {\r\n            maxBargain: number,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n    /**\r\n     * Sets the bargain status for the user.\r\n     * \r\n     * @param status - The new bargain status (true to enable, false to disable).\r\n     * @returns A promise that resolves to the response message.\r\n     */\r\n    async setBargainStatus(status: boolean) {\r\n        const path = '/api/v1/me';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.patch<{ message: string }>(path, { offers_enabled: status }, { key });\r\n        this.emit('api:UpdateBargainStatus', {\r\n            status,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n\r\n    async setPrivacyStall(isPublic: boolean) {\r\n        const path = '/api/v1/me';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.patch<{ message: string }>(path, { stall_public: isPublic }, { key });\r\n        this.emit('api:UpdatePrivacyStall', {\r\n            isPublic,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n\r\n    async setAwayStall(isAway: boolean) {\r\n        const path = '/api/v1/me';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.patch<{ message: string }>(path, { away: isAway }, { key });\r\n        this.emit('api:UpdateAwayStall', {\r\n            isAway,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n    async getTrades(options: getTradesRequestOptions = {}) {\r\n        const path = `/api/v1/me/trades`;\r\n        const key = 'trades';\r\n        if (options.state && new Set(options.state).size !== options.state.length) {\r\n            throw new Error(\"Duplicate values in 'state' parameter\");\r\n        }\r\n\r\n        if (options.page === undefined) {\r\n            options.page = 0;\r\n        }\r\n        if (options.limit === undefined) {\r\n            options.limit = 30;\r\n        }\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        const response = await this.get<ITradeOfferResponse>(path, { refererUrl: 'https://csfloat.com/profile', ...options, key });\r\n\r\n        this.cache.trades = response;\r\n        this.emit('api:UpdateTrades', response);\r\n        return response;\r\n    }\r\n    async acceptTrades(trade_ids: string[]) {\r\n        const path = `/api/v1/trades/bulk/accept`;\r\n        const key = 'trades';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<{ data: ITradeOffer[] }>(path, { trade_ids }, { key });\r\n        this.emit('api:AcceptTrades', response.data);\r\n        return response;\r\n    }\r\n    async cancelTrades(trade_ids: string[]) {\r\n        const path = `/api/v1/me/trades/bulk/cancel`;\r\n        const key = 'trades';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<{ data: ITradeOffer[] }>(path, { trade_ids }, { key });\r\n        this.emit('api:CancelTrades', response.data);\r\n        return response;\r\n    }\r\n    async buyItems(contract_ids: string[], total_price: number) {\r\n        const path = '/api/v1/listings/buy';\r\n        const key = 'buy_items';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<{ message: string }[]>(path, { contract_ids, total_price }, { key });\r\n        this.emit('api:BuyItems', response);\r\n        return response;\r\n    }\r\n    async sellItem(data: ISaleItemParams) {\r\n        const path = '/api/v1/listings/sell';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<ISaleListingResponse>(path, data, { key });\r\n        this.emit('api:UpdateSaleItem', response);\r\n        return response;\r\n    }\r\n    async getInventory() {\r\n        const path = '/api/v1/me/inventory';\r\n        const key = 'inventory';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<IInventoryItem[]>(path, { refererUrl: 'https://csfloat.com/profile', key });\r\n\r\n        this.cache.inventory = response;\r\n        this.emit('api:UpdateInventory', response);\r\n        return response;\r\n    }\r\n    async getStore(userId: string, params: IGetListingsParams = {}) {\r\n        return this.getStall(userId, params);\r\n    }\r\n    async getStall(userId: string, params: IGetListingsParams = {}): Promise<IListingEntry[]> {\r\n        const path = `/api/v1/users/${userId}/stall`;\r\n        const key = 'stall';\r\n        if (params.limit === 0) {\r\n            params.limit = 40; // Default limit if 0 is provided\r\n        }\r\n        if (params.limit && (params?.limit < 1 || params?.limit > 50)) {\r\n            console.warn('Limit must be between 1 and 50, defaulting to 40');\r\n            params.limit = 40; // Default value\r\n        }\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        const query = this.parseParams(params);\r\n\r\n        const response = await this.get<IListingEntry[]>(path, { refererUrl: 'https://csfloat.com/profile', params: query, key });\r\n        this.emit('api:UpdateStall', response);\r\n        return response;\r\n    }\r\n\r\n    async getOffersTimeLine(limit: number = 40) {\r\n        const path = '/api/v1/me/offers-timeline';\r\n        const key = 'main';\r\n\r\n        if (limit === 0) {\r\n            limit = 40;\r\n        }\r\n\r\n        if (limit < 1 || limit > 100) {\r\n            throw new Error('Limit must be between 1 and 100');\r\n        }\r\n        if (limit % 1 !== 0) {\r\n            throw new Error('Limit must be an integer');\r\n        }\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<IOffersResponse>(path, { refererUrl: 'https://csfloat.com/profile', limit, key });\r\n        this.emit('api:UpdateOffersTimeline', response);\r\n        return response;\r\n    }\r\n    async getOfferHistory(offerId: string) {\r\n        const path = `/api/v1/offers/${offerId}/history`;\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<IOfferHistory[]>(path, { refererUrl: 'https://csfloat.com/profile', key });\r\n        this.emit('api:UpdateOfferHistory', {\r\n            offerId,\r\n            history: response\r\n        });\r\n        return response;\r\n    }\r\n\r\n    async getNotifications() {\r\n        const path = '/api/v1/me/notifications/timeline';\r\n        const key = 'notifications';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<INotificationsResponse>(path, { refererUrl: 'https://csfloat.com/profile', key });\r\n        this.cache.notifications = response;\r\n        this.emit('api:UpdateNotifications', response);\r\n        return response;\r\n    }\r\n    async readNotification(notificationId: string) {\r\n        const path = `/api/v1/me/notifications/read-receipt`;\r\n        const key = 'notifications-read';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<{ message: string }>(path, { last_read_id: notificationId }, { key });\r\n        this.emit('api:ReadNotification', {\r\n            notificationId,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n    async updateTradeOfferUrl(trade_url: string) {\r\n        const path = '/api/v1/me';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        if (!trade_url) {\r\n            throw new Error('Trade URL cannot be empty');\r\n        }\r\n\r\n        const response = await this.patch<{ message: string }>(path, { trade_url }, { key });\r\n        this.emit('api:UpdateTradeOfferUrl', {\r\n            trade_url,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n    async verifySms(phone_number: string, token?: string) {\r\n        const path = '/api/v1/me/verify-sms';\r\n        const key = 'verify_sms';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<{ message: string }>(path, { phone_number, token }, { key });\r\n        this.emit('api:VerifySms', response);\r\n        return response;\r\n    }\r\n    private parseParams(params: IGetListingsParams = {}): Record<string, any> {\r\n        const {\r\n            limit = 40,\r\n            stickers,\r\n            keychains,\r\n            ...rest\r\n        } = params;\r\n\r\n        const query: Record<string, any> = {\r\n            ...rest,\r\n            limit,\r\n        };\r\n\r\n        if (stickers) {\r\n            query.stickers = JSON.stringify(stickers);\r\n        }\r\n\r\n        if (keychains) {\r\n            query.keychains = JSON.stringify(keychains);\r\n        }\r\n        return query;\r\n    }\r\n    async getListings(params: IGetListingsParams = {}): Promise<ICsFloatListingsResponse> {\r\n        const path = '/api/v1/listings';\r\n        const key = 'listing';\r\n\r\n        if (params.limit === 0) {\r\n            params.limit = 40;\r\n        }\r\n\r\n        if (params.limit && (params?.limit < 1 || params?.limit > 50)) {\r\n            console.warn('Limit must be between 1 and 50, defaulting to 40');\r\n            params.limit = 40;\r\n        }\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const query = this.parseParams(params);\r\n\r\n        const response = await this.get<ICsFloatListingsResponse>(path, { params: query, key });\r\n        this.cache.listings = this.cache.listings || {};\r\n        for (const listing of response.data || []) {\r\n            this.cache.listings[listing.id] = listing;\r\n        }\r\n        this.emit('api:UpdateListings', response.data);\r\n\r\n        return response;\r\n    }\r\n\r\n    async getListingBuyOrders(listingId: number, limit: number = 10) {\r\n        const path = `/api/v1/listings/${listingId}/buy-orders`;\r\n        const key = 'buy_orders';\r\n\r\n        if (limit === 0 || limit < 1 || limit > 25) {\r\n            console.warn('Limit must be between 1 and 25, defaulting to 10');\r\n            limit = 10; // Default value\r\n        }\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const res = await this.get<IBuyOrder[]>(path, { refererUrl: 'https://csfloat.com/item/' + listingId, limit, key });\r\n        this.emit('api:UpdateListingBuyOrders', {\r\n            listingId,\r\n            buyOrders: res\r\n        });\r\n        return res;\r\n    }\r\n    async getListingSales(listingId: number) {\r\n        const path = `/api/v1/listings/${listingId}/sales`;\r\n        const key = 'sales';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const res = await this.get<ISalesItemsResponse>(path, { refererUrl: 'https://csfloat.com/item/' + listingId, key });\r\n        this.emit('api:UpdateSalesItems', {\r\n            listingId,\r\n            salesItems: res\r\n        });\r\n        return res;\r\n    }\r\n    async getListingSimilar(listingId: number) {\r\n        const path = `/api/v1/listings/${listingId}/similar`;\r\n        const key = 'similar';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const res = await this.get<ISimilarItemEntry[]>(path, { refererUrl: 'https://csfloat.com/item/' + listingId, key });\r\n        this.emit('api:UpdateSimilarItems', {\r\n            listingId,\r\n            similarItems: res\r\n        });\r\n    }\r\n\r\n    async getItemHistory(market_hash_name: number, paint_index: number) {\r\n        const path = `/api/v1/history/${market_hash_name}/graph`;\r\n        const key = 'history';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const res = await this.get<IItemHistoryEntry[]>(path, { paint_index, key });\r\n        this.cache.itemHistory = this.cache.itemHistory || {};\r\n        this.cache.itemHistory[`${market_hash_name}-${paint_index}`] = res;\r\n        this.emit('api:UpdateItemHistory', {\r\n            market_hash_name,\r\n            paint_index,\r\n            history: res\r\n        });\r\n        return res;\r\n    }\r\n\r\n    async bitItem(listingId: number, max_price: number) {\r\n        const path = `/api/v1/listings/${listingId}/bit`;\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        if (max_price < 0) {\r\n            throw new Error('Max price must be a positive number');\r\n        }\r\n        const response = await this.post<IBitItemResponse>(path, { max_price }, { key });\r\n        this.emit('api:BitItem', response);\r\n        return response;\r\n    }\r\n    async getMobileStatus() {\r\n        const path = '/api/v1/me/mobile/status';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const res = await this.get<any>(path, { key });\r\n        const status = res.status === 'active';\r\n        this.emit('api:UpdateMobileStatus', {\r\n            status,\r\n            message: res.message || 'Mobile status retrieved successfully'\r\n        });\r\n        return res;\r\n    }\r\n\r\n    async newTradeOffer(options: {\r\n        given_asset_ids: string[];\r\n        offer_id: string;\r\n        received_asset_ids: string[];\r\n    }) {\r\n        const path = '/api/v1/trades/steam-status/new-offer';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        if (!options.given_asset_ids || !options.received_asset_ids) {\r\n            throw new Error('Both given_asset_ids and received_asset_ids must be provided');\r\n        }\r\n        if (options.given_asset_ids.length === 0 || options.received_asset_ids.length === 0) {\r\n            throw new Error('Both given_asset_ids and received_asset_ids must contain at least one item');\r\n        }\r\n        if (!options.offer_id) {\r\n            throw new Error('Offer ID must be provided');\r\n        }\r\n\r\n\r\n        const result = await this.post<ITradeOffer>(path, options, { key });\r\n        this.emit('api:NewTradeOffer', result);\r\n        return result;\r\n    }\r\n    async updateTradeOffer(options: {\r\n        sent_offers: {\r\n            offer_id: string;\r\n            state: number;\r\n            given_asset_ids: string[];\r\n            received_asset_ids: string[];\r\n            time_created: number;\r\n            time_updated: number;\r\n            other_steam_id64: string;\r\n        }[];\r\n        type: number;\r\n    }) {\r\n        const path = '/api/v1/trades/steam-status/offer';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.post<ITradeOffer>(path, options, { key });\r\n        this.emit('api:UpdateTradeOffer', response);\r\n        return response;\r\n    }\r\n    async setMobileStatus(status: boolean) {\r\n        const path = '/api/v1/me/mobile/status';\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        const response = await this.post<{ message: string }>(path, { version: '8.0.0' }, { key });\r\n        this.emit('api:UpdateMobileStatus', {\r\n            status,\r\n            message: response.message\r\n        });\r\n        return response;\r\n    }\r\n    async changeListingPrice(listingId: string, newPrice: number) {\r\n        const path = `/api/v1/listings/${listingId}`;\r\n        const key = 'main';\r\n        await this.rateLimiter.ensureAvailable(key);\r\n        if (newPrice < 0) {\r\n            throw new Error('New price must be a positive number');\r\n        }\r\n        const response = await this.patch<IListingEntry>(path, { price: newPrice }, { key });\r\n        this.cache.listings = this.cache.listings || {};\r\n        this.cache.listings[listingId] = response;\r\n        return response;\r\n    }\r\n    async getListingById(listingId: number) {\r\n        const path = `/api/v1/listings/${listingId}`;\r\n        const key = 'main';\r\n\r\n        await this.rateLimiter.ensureAvailable(key);\r\n\r\n        const response = await this.get<IListingEntry>(path, { refererUrl: 'https://csfloat.com/item/' + listingId, key });\r\n\r\n        this.cache.listings = this.cache.listings || {};\r\n        this.cache.listings[listingId] = response;\r\n        this.emit('api:UpdateListing', response);\r\n        return response;\r\n    }\r\n\r\n    getRateLimit(key: string = 'main') {\r\n        return this.rateLimiter.getInfo(key);\r\n    }\r\n    getRateLimits() {\r\n        return this.rateLimiter.getAll();\r\n    }\r\n}\r\n","import { CsFloatTransactionType, Rarity } from \"./enums\";\r\n\r\nexport type CsFloatOptions = CsFloatApiKeyOptions | CsFloatSessionOptions;\r\nexport interface CsFloatOptionsBase {\r\n    baseUrl?: string;\r\n    updateUserEvery?: number;\r\n\r\n}\r\nexport interface CsFloatApiKeyOptions extends CsFloatOptionsBase {\r\n    apiKey: string;\r\n}\r\nexport interface CsFloatSessionOptions extends CsFloatOptionsBase {\r\n    session: string;\r\n}\r\n\r\nexport interface RateLimitInfo {\r\n    limit: number;\r\n    remaining: number;\r\n    reset: number;\r\n}\r\n\r\n\r\nexport interface ICsFloatMeResponse {\r\n    user: {\r\n        steam_id: string;\r\n        username: string;\r\n        flags: number;\r\n        avatar: string;\r\n        background_url: string;\r\n        email: string;\r\n        balance: number;\r\n        pending_balance: number;\r\n        stall_public: boolean;\r\n        away: boolean;\r\n        trade_token: string;\r\n        payment_accounts?: {\r\n            stripe_connect: string;\r\n            stripe_customer: string;\r\n        };\r\n        statistics: {\r\n            total_sales: number;\r\n            total_purchases: number;\r\n            median_trade_time: number;\r\n            total_avoided_trades: number;\r\n            total_failed_trades: number;\r\n            total_verified_trades: number;\r\n            total_trades: number;\r\n        };\r\n        preferences: {\r\n            offers_enabled: boolean | null;\r\n            max_offer_discount: number;\r\n        };\r\n        know_your_customer: 'approved' | 'pending' | 'rejected' | string;\r\n        extension_setup_at: string;\r\n        firebase_messaging: {\r\n            platform: string | null;\r\n            last_updated: string | null;\r\n        };\r\n        stripe_connect?: {\r\n            payouts_enabled: boolean;\r\n        };\r\n        has_valid_steam_api_key: boolean;\r\n        obfuscated_id: string;\r\n        online: boolean;\r\n        fee: number;\r\n        withdraw_fee: number;\r\n        subscriptions: any[]; // если появятся типы — уточним\r\n        has_2fa: boolean;\r\n        has_api_key: boolean;\r\n    };\r\n    pending_offers: number;\r\n    actionable_trades: number;\r\n    has_unread_notifications: boolean;\r\n}\r\nexport interface ICsFloatAccountStandingResponse {\r\n    standing: 'excellent' | 'good' | 'poor' | 'at_risk' | 'banned';\r\n    penalty_progress: number;\r\n    recent_restrictions: any[];\r\n}\r\n\r\nexport interface ICsFloatListingsResponse {\r\n    data: IListingEntry[];\r\n}\r\n\r\nexport interface IListingEntry {\r\n    id: string;\r\n    created_at: string;\r\n    type: 'auction' | 'buy_now';\r\n    price: number;\r\n    description?: string;\r\n    state: 'listed' | 'sold' | 'cancelled';\r\n    seller: ISeller;\r\n    reference: IReference;\r\n    item: IItem;\r\n    is_seller: boolean;\r\n    min_offer_price: number;\r\n    max_offer_discount: number;\r\n    is_watchlisted: boolean;\r\n    watchers: number;\r\n    auction_details?: IAuctionDetails;\r\n}\r\n\r\nexport interface ISeller {\r\n    avatar?: string;\r\n    away: boolean;\r\n    flags: number;\r\n    has_valid_steam_api_key: boolean;\r\n    online: boolean;\r\n    stall_public: boolean;\r\n    steam_id?: string;\r\n    username?: string;\r\n    obfuscated_id?: string;\r\n    statistics: ISellerStatistics;\r\n}\r\n\r\nexport interface ISellerStatistics {\r\n    median_trade_time: number;\r\n    total_avoided_trades: number;\r\n    total_failed_trades: number;\r\n    total_trades: number;\r\n    total_verified_trades: number;\r\n}\r\n\r\nexport interface IReference {\r\n    base_price: number;\r\n    float_factor: number;\r\n    predicted_price: number;\r\n    quantity: number;\r\n    last_updated: string;\r\n}\r\n\r\nexport interface IItem {\r\n    asset_id: string;\r\n    def_index: number;\r\n    paint_index: number;\r\n    paint_seed: number;\r\n    float_value: number;\r\n    icon_url: string;\r\n    d_param: string;\r\n    is_stattrak: boolean;\r\n    is_souvenir: boolean;\r\n    rarity: number;\r\n    quality: number;\r\n    market_hash_name: string;\r\n    low_rank?: number;\r\n    high_rank?: number;\r\n    tradable: number;\r\n    inspect_link: string;\r\n    cs2_screenshot_id: string;\r\n    cs2_screenshot_at: string;\r\n    is_commodity: boolean;\r\n    type: string;\r\n    rarity_name: string;\r\n    type_name: string;\r\n    item_name: string;\r\n    wear_name: string;\r\n    phase?: string;\r\n    description: string;\r\n    serialized_inspect: string;\r\n    gs_sig: string;\r\n    blue_gem?: IBlueGemStats;\r\n    stickers: ISticker[];\r\n    collection?: string;\r\n}\r\n\r\nexport interface IBlueGemStats {\r\n    backside_blue: number;\r\n    backside_purple: number;\r\n    backside_gold: number;\r\n    playside_blue: number;\r\n    playside_purple: number;\r\n    playside_gold: number;\r\n}\r\n\r\nexport interface IAuctionDetails {\r\n    reserve_price: number;\r\n    top_bid: IAuctionBid;\r\n    expires_at: string;\r\n    min_next_bid: number;\r\n}\r\n\r\nexport interface IAuctionBid {\r\n    id: string;\r\n    created_at: string;\r\n    price: number;\r\n    contract_id: string;\r\n    state: string;\r\n    obfuscated_buyer_id: string;\r\n}\r\nexport type IStickerFilter =\r\n    | { i: number; s?: number }\r\n    | { c: string; s?: number };\r\n\r\nexport interface IGetListingsParams {\r\n    limit?: number;\r\n    min_ref_qty?: number;\r\n    min_float?: number;\r\n    max_float?: number;\r\n    def_index?: number;\r\n    paint_index?: number;\r\n    paint_seed?: number;\r\n    category?: number;\r\n    rarity?: number;\r\n    collection?: string;\r\n    type?: 'auction' | 'buy_now';\r\n    min_price?: number;\r\n    max_price?: number;\r\n    min_keychain_pattern?: number;\r\n    max_keychain_pattern?: number;\r\n    min_blue?: number;\r\n    max_blue?: number;\r\n    min_fade?: number;\r\n    max_fade?: number;\r\n    filter?: 'sticker_combos' | 'unique';\r\n    sort_by?: \"expires_soon\" | \"num_bids\" | \"float_rank\" | \"highest_float\" | \"lowest_float\" | \"highest_price\" | \"lowest_price\" | \"most_recent\" | \"highest_discount\"\r\n    sticker_option?: 'skins' | 'keychains' | 'packages';\r\n    stickers?: IStickerFilter[];\r\n    keychains?: { i: number }[];\r\n    market_hash_name?: string;\r\n    cursor?: string;\r\n}\r\n\r\n\r\nexport type IBuyOrder =\r\n    | {\r\n        id: string;\r\n        created_at: string;\r\n        expression: string;\r\n        qty: number;\r\n        price: number;\r\n        market_hash_name?: never;\r\n    }\r\n    | {\r\n        id: string;\r\n        created_at: string;\r\n        market_hash_name: string;\r\n        qty: number;\r\n        price: number;\r\n        expression?: never;\r\n    };\r\n\r\nexport interface ISimilarItemEntry {\r\n    id: string;\r\n    created_at: string;\r\n    type: 'buy_now' | 'auction';\r\n    price: number;\r\n    state: 'listed' | 'sold' | 'cancelled';\r\n    seller: ISellerWithoutName;\r\n    reference: IReference;\r\n    item: ISimilarItem;\r\n    is_seller: boolean;\r\n    is_watchlisted: boolean;\r\n    watchers: number;\r\n}\r\n\r\nexport interface ISellerWithoutName {\r\n    away: boolean;\r\n    flags: number;\r\n    has_valid_steam_api_key: boolean;\r\n    obfuscated_id: string;\r\n    online: boolean;\r\n    stall_public: boolean;\r\n    statistics: ISellerStatistics;\r\n}\r\nexport interface ISimilarItem extends IItem {\r\n}\r\nexport interface ISticker {\r\n    stickerId: number;\r\n    slot: number;\r\n    icon_url: string;\r\n    name: string;\r\n    reference: {\r\n        price: number;\r\n        quantity: number;\r\n        updated_at: string;\r\n    };\r\n}\r\n\r\nexport interface IItemHistoryEntry {\r\n    avg_price: number;\r\n    count: number;\r\n    day: string\r\n}\r\n\r\nexport interface ISalesItem {\r\n    price: number;\r\n    sold_at: string;\r\n    item: ISaleItem;\r\n}\r\nexport interface ISaleItem extends Omit<IItem, 'stickers'> {\r\n    stickers?: ISaleSticker[];\r\n}\r\nexport interface ISaleSticker {\r\n    stickerId: number;\r\n    slot: number;\r\n    icon_url: string;\r\n    name: string;\r\n}\r\nexport type ISalesItemsResponse = ISalesItem[];\r\n\r\nexport interface IBitItemResponse {\r\n    contract_id: string;\r\n    created_at: string;\r\n    id: string;\r\n    max_price: number;\r\n}\r\n\r\nexport interface ITransactionsResponse {\r\n    transactions: Array<IDepositTransaction | IContractPurchasedTransaction | ITransactionUnknown | IBidPostedTransaction>;\r\n    count: number;\r\n}\r\n\r\nexport interface ITransactionBasic {\r\n    id: string;\r\n    created_at: string;\r\n    user_id: string;\r\n    balance_offset: number;\r\n    pending_offset: number;\r\n}\r\nexport interface ITransactionUnknown extends ITransactionBasic {\r\n    type: CsFloatTransactionType.Unknown;\r\n    details: Record<string, any>;\r\n}\r\n\r\n\r\n\r\nexport interface IDepositTransaction extends ITransactionBasic {\r\n    type: CsFloatTransactionType.Deposit;\r\n    details: {\r\n        fee: string;\r\n        payment_method: string;\r\n        payment_processor: string;\r\n        session_id: string;\r\n    };\r\n}\r\nexport interface IWithdrawalTransaction extends ITransactionBasic {\r\n    type: CsFloatTransactionType.Withdrawal;\r\n    details: {\r\n        fee: string;\r\n        payment_method: string;\r\n        payment_processor: string;\r\n        session_id: string;\r\n    };\r\n}\r\nexport interface IContractPurchasedTransaction extends ITransactionBasic {\r\n    type: CsFloatTransactionType.ContractPurchased;\r\n    details: {\r\n        contract_id: string;\r\n    };\r\n}\r\n\r\nexport interface IBidPostedTransaction extends ITransactionBasic {\r\n    type: CsFloatTransactionType.BidPosted;\r\n    details: {\r\n        bid_id: string;\r\n        listing_id: string;\r\n    };\r\n}\r\n\r\n\r\nexport interface IBuyOrderBase {\r\n    id: string;\r\n    created_at: string;\r\n    qty: number;\r\n    price: number;\r\n    bought_item_count: number;\r\n}\r\nexport type IBuyOrderMarketHashName = IBuyOrderBase & {\r\n    market_hash_name: string;\r\n    expression?: never;\r\n};\r\nexport type IBuyOrderExpression = IBuyOrderBase & {\r\n    market_hash_name?: never;\r\n    expression: string;\r\n};\r\n\r\nexport type Operator = '==' | '>' | '<' | 'has';\r\n\r\nexport interface IExpressionRule {\r\n    field: string;\r\n    operator: Operator;\r\n    value: {\r\n        constant?: string;\r\n        sticker?: {\r\n            id: number;\r\n            qty: number;\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IExpressionGroup {\r\n    condition: 'and' | 'or';\r\n    rules: (IExpressionRule | IExpressionGroup)[];\r\n}\r\n\r\nexport const RarityNameMap: Record<string, Rarity> = {\r\n    consumer: Rarity.Consumer,\r\n    industrial: Rarity.Industrial,\r\n    'mil-spec': Rarity.MilSpec,\r\n    restricted: Rarity.Restricted,\r\n    classified: Rarity.Classified,\r\n    covert: Rarity.Covert,\r\n    contraband: Rarity.Contraband,\r\n};\r\n\r\nexport type IAutoBitsResponse = {\r\n    id: string,\r\n    created_at: string,\r\n    max_price: number,\r\n    contract_id: string\r\n}[];\r\n\r\nexport type getTradesRequestOptions = getTradesRequestOptionsAsSeller | getTradesRequestOptionsAsBuyer;\r\nexport type TradesStatus = \"failed\" | \"cancelled\" | \"verified\" | \"queued\" | \"pending\";\r\n\r\n\r\nexport interface getTradesRequestOptionsBase {\r\n    page?: number;\r\n    limit?: number;\r\n    state?: TradesStatus[];\r\n    role?: unknown;\r\n}\r\nexport interface getTradesRequestOptionsAsSeller extends getTradesRequestOptionsBase {\r\n    role?: 'seller';\r\n}\r\nexport interface getTradesRequestOptionsAsBuyer extends getTradesRequestOptionsBase {\r\n    role?: 'buyer';\r\n}\r\n\r\nexport interface ITradeOfferResponse {\r\n    trades: ITradeOffer[];\r\n    count: number;\r\n}\r\nexport interface ITradeOffer {\r\n    id: string;\r\n    created_at: string;\r\n    buyer_id: string;\r\n    buyer: ISeller;\r\n    seller_id: string;\r\n    seller: ISeller;\r\n    contract_id: string;\r\n    state: TradesStatus | string;\r\n    verification_mode: string;\r\n    steam_offer: ISteamTradeOffer;\r\n    manual_verification: boolean;\r\n    manual_verification_at: string | null;\r\n    inventory_check_status: number;\r\n    contract: IListingEntry;\r\n    trade_url: string;\r\n    trade_token: string;\r\n    wait_for_cancel_ping: boolean;\r\n}\r\nexport interface ISteamTradeOffer {\r\n    is_from_seller: boolean,\r\n    sent_at: string | null,\r\n    deadline_at: string | null,\r\n    updated_at: string | null\r\n}\r\n\r\nexport type ISaleItemParams = ISaleItemAuction | ISaleItemBuyNow;\r\n\r\nexport interface ISaleItemBase {\r\n    asset_id: string;\r\n    type: 'auction' | 'buy_now';\r\n    description: string;\r\n    private: boolean;\r\n}\r\nexport interface ISaleItemAuction extends ISaleItemBase {\r\n    type: 'auction';\r\n    reserve_price: number;\r\n    duration_days: number;\r\n}\r\nexport interface ISaleItemBuyNow extends ISaleItemBase {\r\n    type: 'buy_now';\r\n    price: number;\r\n}\r\n\r\nexport type ISaleListingResponse = ISaleListingBuyNow | ISaleListingAuction;\r\nexport interface ISaleListingBase {\r\n    id: string;\r\n    created_at: string;\r\n    price: number;\r\n    private?: boolean;\r\n    description?: string;\r\n    state: 'listed' | 'sold' | 'cancelled';\r\n    seller: ISeller;\r\n    reference: IReference;\r\n    item: IItem;\r\n    is_seller: boolean;\r\n    is_watchlisted: boolean;\r\n    watchers: number;\r\n}\r\nexport interface ISaleListingBuyNow extends ISaleListingBase {\r\n    type: 'buy_now';\r\n}\r\nexport interface ISaleListingAuction extends ISaleListingBase {\r\n    type: 'auction';\r\n    auction_details: {\r\n        reserve_price: number;\r\n        expires_at: string;\r\n        min_next_bid: number;\r\n    }\r\n}\r\n\r\nexport interface IInventoryItemReference {\r\n    base_price: number;\r\n    float_factor?: number;\r\n    predicted_price: number;\r\n    quantity: number;\r\n    last_updated: string; // ISO string\r\n}\r\n\r\nexport interface IInventoryItem {\r\n    asset_id: string;\r\n    def_index: number;\r\n    paint_index?: number;\r\n    paint_seed?: number;\r\n    float_value?: number;\r\n    icon_url: string;\r\n    d_param?: string;\r\n    is_stattrak?: boolean;\r\n    is_souvenir?: boolean;\r\n    rarity: number;\r\n    quality?: number;\r\n    market_hash_name: string;\r\n    tradable: number;\r\n    inspect_link?: string;\r\n    is_commodity: boolean;\r\n    type: string; // e.g., \"skin\", \"container\"\r\n    rarity_name: string;\r\n    type_name: string;\r\n    item_name: string;\r\n    wear_name?: string;\r\n    description?: string;\r\n    collection?: string;\r\n    reference: IInventoryItemReference;\r\n    serialized_inspect?: string;\r\n    gs_sig?: string;\r\n}\r\n\r\nexport type IInventoryResponse = IInventoryItem[];\r\n\r\n\r\nexport interface IOffersResponse {\r\n    offers: IOfferItem[];\r\n}\r\nexport interface IOfferItem {\r\n    id: string;\r\n    created_at: string;\r\n    expires_at: string;\r\n    buyer_id: string;\r\n    buyer: ISeller;\r\n    seller_id: string;\r\n    seller: ISeller;\r\n    contract_id: string;\r\n    contract_price: number;\r\n    price: number;\r\n    type: 'seller_offer' | 'buyer_offer';\r\n    contract: IListingEntry;\r\n    state: 'pending' | 'accepted' | 'rejected' | 'cancelled';\r\n}\r\n\r\nexport interface IOfferHistory {\r\n    id: string,\r\n    created_at: string,\r\n    expires_at: string,\r\n    contract_id: string,\r\n    contract_price: number,\r\n    buyer_id: string,\r\n    price: number,\r\n    type: \"seller_offer\" | \"buyer_offer\",\r\n    state: \"accepted\" | \"rejected\" | \"pending\"\r\n}\r\n\r\nexport interface INotificationsResponse {\r\n    data: INotification[];\r\n    cursor: string\r\n}\r\n\r\nexport interface INotification {\r\n    body: string;\r\n    created_at: string;\r\n    notification_id: string;\r\n    redirect_path: string;\r\n    title: string;\r\n    type: \"offer_added\" | \"sold_contract\" | \"bought_contract\" | \"tos_pp_update\" | \"price_drop\" | \"deposit_success\" | \"deposit_fail\" | \"buyer_verified_trade\" | \"sumsub\" | string;\r\n}\r\n\r\nexport const HttpStatusMessages: Record<number, string> = {\r\n    100: 'Continue',\r\n    101: 'Switching Protocols',\r\n    102: 'Processing',\r\n    200: 'OK',\r\n    201: 'Created',\r\n    202: 'Accepted',\r\n    204: 'No Content',\r\n    301: 'Moved Permanently',\r\n    302: 'Found',\r\n    304: 'Not Modified',\r\n    400: 'Bad Request',\r\n    401: 'Unauthorized',\r\n    403: 'Forbidden',\r\n    404: 'Not Found',\r\n    405: 'Method Not Allowed',\r\n    406: 'Not Acceptable',\r\n    408: 'Request Timeout',\r\n    409: 'Conflict',\r\n    410: 'Gone',\r\n    415: 'Unsupported Media Type',\r\n    422: 'Unprocessable Entity',\r\n    429: 'Too Many Requests',\r\n    500: 'Internal Server Error',\r\n    501: 'Not Implemented',\r\n    502: 'Bad Gateway',\r\n    503: 'Service Unavailable',\r\n    504: 'Gateway Timeout',\r\n};\r\n\r\nexport const CSFloatErrorCodes: Record<number, string | { message: string }[]> = {\r\n    4: [{\r\n        message: 'you can only place buy orders on commodities that have been listed on CSFloat before',\r\n    }, {\r\n        message: 'missing partner id or token in trade url',\r\n    }],\r\n    28: 'failed to validate token',\r\n    82: 'invalid api key',\r\n    88: 'your buy order is too complex, please simplify it or break it up into separate orders'\r\n}","import { EventEmitter } from \"events\";\r\n\r\nexport interface IRateLimitInfo {\r\n    limit: number;\r\n    remaining: number;\r\n    reset: number;\r\n}\r\n\r\nexport class RateLimiter extends EventEmitter {\r\n    private limits = new Map<string, IRateLimitInfo>();\r\n\r\n    update(headers: Record<string, any>, key = 'main') {\r\n        const limit = parseInt(headers['x-ratelimit-limit'] ?? '0');\r\n        const remaining = parseInt(headers['x-ratelimit-remaining'] ?? '1');\r\n        const reset = parseInt(headers['x-ratelimit-reset'] ?? `${Math.floor(Date.now() / 1000)}`);\r\n\r\n        if (!isNaN(limit)) {\r\n            this.limits.set(key, { limit, remaining, reset });\r\n        }\r\n        this.emit('rateLimit:Update', key, { limit, remaining, reset });\r\n    }\r\n\r\n    on<K>(eventName: string | symbol, listener: (...args: any[]) => void): this {\r\n        super.on(eventName, listener);\r\n\r\n        return this;\r\n    }\r\n\r\n    async ensureAvailable(key = 'main') {\r\n        const info = this.limits.get(key);\r\n        if (!info) return;\r\n\r\n        const { remaining, reset } = info;\r\n\r\n        if (remaining <= 0) {\r\n            const now = Math.floor(Date.now() / 1000);\r\n            const wait = reset - now;\r\n            if (wait > 0) {\r\n                console.warn(`[RateLimit] [${key}] waiting ${wait}s`);\r\n                await new Promise((resolve) => setTimeout(resolve, wait * 1000));\r\n            }\r\n        }\r\n    }\r\n\r\n    getInfo(key = 'main'): IRateLimitInfo | undefined {\r\n        return this.limits.get(key);\r\n    }\r\n\r\n    getAll() {\r\n        const now = Math.floor(Date.now() / 1000); // текущий UNIX time в секундах\r\n\r\n        const limits = Array.from(this.limits.entries()).map(([key, value]) => ({\r\n            key,\r\n            ...value,\r\n            reset_in: Math.max(0, (value.reset - now) * 1000),\r\n            reset_in_string: RateLimiter.formatDuration(value.reset - now),\r\n        }));\r\n\r\n        return {\r\n            limits,\r\n            keys: Array.from(this.limits.keys()),\r\n        };\r\n    }\r\n\r\n    getKeys(): string[] {\r\n        return [...this.limits.keys()];\r\n    }\r\n\r\n    static formatDuration(seconds: number): string {\r\n        const h = Math.floor(seconds / 3600);\r\n        const m = Math.floor((seconds % 3600) / 60);\r\n        const s = seconds % 60;\r\n\r\n        const parts = [];\r\n        if (h > 0) parts.push(`${h}h`);\r\n        if (m > 0) parts.push(`${m}m`);\r\n        if (s > 0 || parts.length === 0) parts.push(`${s}s`);\r\n\r\n        return `resets in ${parts.join(' ')}`;\r\n    }\r\n\r\n}\r\n","import { RarityNameMap } from \"./types\";\r\nimport { Rarity } from \"./enums\";\r\n\r\n// Типы операторов\r\nexport type EqualityOperator = '==' | '!=';\r\nexport type ComparisonOperator = '>' | '>=' | '<' | '<=';\r\nexport type HasOperator = 'has';\r\nexport type Operator = EqualityOperator | ComparisonOperator | HasOperator;\r\n\r\nexport type BuyOrderField =\r\n    | 'FloatValue'\r\n    | 'Stickers'\r\n    | 'PaintSeed'\r\n    | 'StatTrak'\r\n    | 'Souvenir'\r\n    | 'Rarity'\r\n    | 'DefIndex'\r\n    | 'PaintIndex';\r\n\r\nexport interface IExpressionRule {\r\n    field: string;\r\n    operator: Operator;\r\n    value: {\r\n        constant?: string;\r\n        sticker?: {\r\n            id: number;\r\n            qty?: number;\r\n            slot?: number;\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IExpressionGroup {\r\n    condition: 'and' | 'or';\r\n    rules: (IExpressionRule | { expression: IExpressionGroup })[];\r\n}\r\n\r\nexport interface IPlaceBuyOrderBody {\r\n    expression: IExpressionGroup;\r\n    max_price: number;\r\n    quantity: number;\r\n}\r\n\r\nconst FieldMetaMap = {\r\n    FloatValue: { operators: ['==', '>', '>=', '<', '<='], valueType: 'number' },\r\n    Stickers: { operators: ['has'], valueType: 'object' },\r\n    PaintSeed: { operators: ['==', '>', '>=', '<', '<='], valueType: 'number' },\r\n    StatTrak: { operators: ['=='], valueType: 'boolean', allowedValues: [true, false] },\r\n    Souvenir: { operators: ['=='], valueType: 'boolean', allowedValues: [true, false] },\r\n    Rarity: { operators: ['=='], valueType: 'number' },\r\n    DefIndex: { operators: ['=='], valueType: 'number' },\r\n    PaintIndex: { operators: ['=='], valueType: 'number' },\r\n} as const;\r\n\r\n\r\n\r\ntype FieldMetaMapType = typeof FieldMetaMap;\r\n\r\ntype FieldValueType<F extends BuyOrderField> =\r\n    FieldMetaMapType[F] extends { allowedValues: readonly (infer V)[] }\r\n    ? V\r\n    : FieldMetaMapType[F]['valueType'] extends 'number' ? number\r\n    : FieldMetaMapType[F]['valueType'] extends 'boolean' ? boolean\r\n    : FieldMetaMapType[F]['valueType'] extends 'string' ? string\r\n    : any;\r\n\r\n\r\nexport class BuyOrderExpressionBuilder {\r\n    private root: IExpressionGroup = { condition: 'and', rules: [] };\r\n    constructor(stringInput?: string) {\r\n        if (stringInput) {\r\n            this.root = BuyOrderExpressionBuilder.parse(stringInput);\r\n        }\r\n    }\r\n    getExpression(): IExpressionGroup {\r\n        return this.root;\r\n    }\r\n    static parse(input?: string): IExpressionGroup {\r\n        if (!input || typeof input !== 'string') {\r\n            throw new Error(\"❌ Input must be a non-empty string\");\r\n        }\r\n        if (!input.includes('=')) {\r\n            throw new Error(\"Don't provide here an market hash name, use 'getWeaponByMarketHashName' method instead\");\r\n        } \r\n        const builder = new BuyOrderExpressionBuilder();\r\n\r\n        const expression = this._parseExpression(input);\r\n        return expression;\r\n    }\r\n    private static _wrapIfNeeded(group: IExpressionGroup): IExpressionRule | { expression: IExpressionGroup } {\r\n        const isSingleRule = group.rules.length === 1 && 'field' in group.rules[0];\r\n        return isSingleRule ? group.rules[0] as IExpressionRule : { expression: group };\r\n    }\r\n\r\n    private static _parseExpression(input: string): IExpressionGroup {\r\n        if (input.startsWith('(') && input.endsWith(')')) {\r\n            input = input.slice(1, -1);\r\n        }\r\n\r\n        const andParts = this._splitByTopLevel(input, 'and');\r\n        if (andParts.length > 1) {\r\n            return {\r\n                condition: 'and',\r\n                rules: andParts.map(part => {\r\n                    const parsed = this._parseExpression(part.trim());\r\n                    return this._wrapIfNeeded(parsed);\r\n                }),\r\n            };\r\n        }\r\n\r\n        const orParts = this._splitByTopLevel(input, 'or');\r\n        if (orParts.length > 1) {\r\n            return {\r\n                condition: 'or',\r\n                rules: orParts.map(part => {\r\n                    const parsed = this._parseExpression(part.trim());\r\n                    return this._wrapIfNeeded(parsed);\r\n                }),\r\n            };\r\n        }\r\n\r\n        const stickerMatch = input.match(/HasSticker\\((\\d+),\\s*(-?\\d+),\\s*(\\d+)\\)/);\r\n        if (stickerMatch) {\r\n            const [, idStr, slotStr, qtyStr] = stickerMatch;\r\n            const id = Number(idStr);\r\n            const qty = Number(qtyStr);\r\n            const slot = Number(slotStr);\r\n            return {\r\n                condition: 'and',\r\n                rules: [{\r\n                    field: 'Stickers',\r\n                    operator: 'has',\r\n                    value: {\r\n                        sticker: { id, qty, slot },\r\n                    },\r\n                }],\r\n            };\r\n        }\r\n\r\n        // Обработка обычных сравнений\r\n        const opMatch = input.match(/(DefIndex|PaintIndex|FloatValue|StatTrak|Souvenir|Rarity|PaintSeed)\\s*(==|>=|<=|<|>)\\s*(.+)/);\r\n        if (opMatch) {\r\n            const [, field, operator, rawValue] = opMatch;\r\n            let value: any = rawValue.trim();\r\n\r\n            if (value === 'true') value = true;\r\n            else if (value === 'false') value = false;\r\n            else if (!isNaN(Number(value))) value = Number(value);\r\n\r\n            return {\r\n                condition: 'and',\r\n                rules: [{\r\n                    field: field as BuyOrderField,\r\n                    operator: operator as Operator,\r\n                    value: { constant: String(value) },\r\n                }],\r\n            };\r\n        }\r\n\r\n        throw new Error(`❌ Не удалось разобрать выражение: ${input}`);\r\n    }\r\n\r\n    private static _splitByTopLevel(input: string, separator: 'and' | 'or'): string[] {\r\n        const parts: string[] = [];\r\n        let depth = 0;\r\n        let current = '';\r\n\r\n        const tokens = input.split(/(\\s+|\\(|\\))/).filter(Boolean);\r\n\r\n        for (const token of tokens) {\r\n            if (token === '(') depth++;\r\n            if (token === ')') depth--;\r\n            if (depth === 0 && token.trim() === separator) {\r\n                parts.push(current.trim());\r\n                current = '';\r\n            } else {\r\n                current += token;\r\n            }\r\n        }\r\n\r\n        if (current) parts.push(current.trim());\r\n        return parts;\r\n    }\r\n\r\n    addRule<F extends BuyOrderField>(\r\n        field: F,\r\n        operator: FieldMetaMapType[F]['operators'][number],\r\n        value: FieldValueType<F>\r\n    ): this {\r\n        this.validateOperator(field, operator);\r\n        this.validateValue(field, value);\r\n\r\n        this.root.rules.push({\r\n            field,\r\n            operator,\r\n            value: { constant: String(value) },\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    addStickerRule(stickerId: number, options: { qty?: number; slot?: number }): this {\r\n        const { qty, slot } = options;\r\n        if ((qty === undefined && slot === undefined) || (qty !== undefined && slot !== undefined)) {\r\n            throw new Error(\"❌ Sticker rule must have either 'qty' or 'slot', but not both\");\r\n        }\r\n\r\n        this.root.rules.push({\r\n            field: 'Stickers',\r\n            operator: 'has',\r\n            value: {\r\n                sticker: {\r\n                    id: stickerId,\r\n                    ...(qty !== undefined ? { qty } : {}),\r\n                    ...(slot !== undefined ? { slot } : {}),\r\n                },\r\n            },\r\n        });\r\n        return this;\r\n    }\r\n\r\n    addGroup(condition: 'and' | 'or', callback: (group: BuyOrderExpressionBuilder) => void): this {\r\n        const subBuilder = new BuyOrderExpressionBuilder();\r\n        callback(subBuilder);\r\n        this.root.rules.push({\r\n            expression: {\r\n                condition,\r\n                rules: subBuilder.root.rules,\r\n            },\r\n        });\r\n        return this;\r\n    }\r\n\r\n    buildExpression(): IExpressionGroup {\r\n        return this.root;\r\n    }\r\n\r\n    buildBuyOrder(max_price: number, quantity: number): IPlaceBuyOrderBody {\r\n        if (typeof quantity !== 'number' || quantity <= 0) {\r\n            throw new Error(\"❌ 'quantity' must be a positive number\");\r\n        }\r\n        this.ensureRequiredFields(['DefIndex', 'PaintIndex']);\r\n        return {\r\n            expression: this.root,\r\n            max_price,\r\n            quantity,\r\n        };\r\n    }\r\n\r\n    public static parseRarity(value: string): Rarity {\r\n        const normalized = value.trim().toLowerCase();\r\n        if (!(normalized in RarityNameMap)) {\r\n            throw new Error(`❌ Unknown rarity name: '${value}'`);\r\n        }\r\n        return RarityNameMap[normalized];\r\n    }\r\n\r\n\r\n    private validateOperator<F extends keyof FieldMetaMapType>(\r\n        field: F,\r\n        operator: FieldMetaMapType[F]['operators'][number]\r\n    ): void {\r\n        const allowedOperators = FieldMetaMap[field].operators;\r\n        const operators = [...allowedOperators];\r\n        if (!operators.includes(operator)) {\r\n            throw new Error(`❌ Operator '${operator}' not allowed for '${field}'. Allowed: ${operators.join(', ')}`);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private validateValue(field: BuyOrderField, value: any): void {\r\n        const meta = FieldMetaMap[field];\r\n        const actualType = typeof value;\r\n\r\n        if (meta.valueType !== 'object' && actualType !== meta.valueType) {\r\n            throw new Error(`❌ Invalid value type for '${field}'. Expected ${meta.valueType}, got ${actualType}`);\r\n        }\r\n\r\n        // Проверка допустимых значений, если они определены\r\n        if ('allowedValues' in meta && Array.isArray(meta.allowedValues)) {\r\n            if (!meta.allowedValues.includes(value)) {\r\n                throw new Error(`❌ Invalid value for '${field}'. Allowed values: ${meta.allowedValues.join(', ')}`);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private ensureRequiredFields(requiredFields: BuyOrderField[]): void {\r\n        const flatRules = this.flattenRules(this.root);\r\n        for (const field of requiredFields) {\r\n            if (!flatRules.some(rule => 'field' in rule && rule.field === field)) {\r\n                throw new Error(`❌ Missing required field '${field}' in expression.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private flattenRules(group: IExpressionGroup): (IExpressionRule | IExpressionGroup)[] {\r\n        const result: (IExpressionRule | IExpressionGroup)[] = [];\r\n        for (const rule of group.rules) {\r\n            if ('field' in rule) {\r\n                result.push(rule);\r\n            } else if ('expression' in rule) {\r\n                result.push(...this.flattenRules(rule.expression));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n"],"mappings":"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","names":["import_events","axios","params","qs"]}